const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const express = require('express');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);

const app = express();
app.get('/', (_, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(process.env.PORT || 3000);

let userStates = {};
let userPhotos = {};

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ
async function accessSheet() {
  await doc.useServiceAccountAuth({
    client_email: process.env.GOOGLE_SERVICE_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  });
  await doc.loadInfo();
}

// –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function getOptions(type, category = null) {
  await accessSheet();
  const sheet = doc.sheetsByIndex[0];
  const rows = await sheet.getRows();

  const categories = new Set();
  const subcategories = new Set();

  for (const row of rows) {
    if (row['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']) categories.add(row['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']);
    if (category && row['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] === category && row['–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']) {
      subcategories.add(row['–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']);
    }
  }

  return type === '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
    ? Array.from(categories)
    : Array.from(subcategories);
}

bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const photo = msg.photo[msg.photo.length - 1].file_id;
  userPhotos[chatId] = [photo];
  userStates[chatId] = { step: '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' };

  const categories = await getOptions('–∫–∞—Ç–µ–≥–æ—Ä–∏—è');
  const buttons = categories.map((c) => [{ text: c }]);

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    reply_markup: { keyboard: buttons, one_time_keyboard: true },
  });
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const state = userStates[chatId];

  if (!state || msg.text.startsWith('/')) return;

  const text = msg.text;

  if (state.step === '–∫–∞—Ç–µ–≥–æ—Ä–∏—è') {
    state.category = text;
    state.step = '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è';

    const subcategories = await getOptions('–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', text);
    const buttons = subcategories.map((s) => [{ text: s }]);

    bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      reply_markup: { keyboard: buttons, one_time_keyboard: true },
    });

  } else if (state.step === '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è') {
    state.subcategory = text;
    state.step = '–Ω–∞–∑–≤–∞–Ω–∏–µ';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');

  } else if (state.step === '–Ω–∞–∑–≤–∞–Ω–∏–µ') {
    state.title = text;
    state.step = '–æ–ø–∏—Å–∞–Ω–∏–µ';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ—Ç):');

  } else if (state.step === '–æ–ø–∏—Å–∞–Ω–∏–µ') {
    state.description = text === '-' ? '' : text;
    state.step = '—Ü–µ–Ω–∞';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:');

  } else if (state.step === '—Ü–µ–Ω–∞') {
    state.price = text;
    state.step = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ';

    const photoId = userPhotos[chatId][0];
    bot.sendPhoto(chatId, photoId, {
      caption: `‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—å:\n\nüì¶ *${state.title}*\nüßæ ${state.description}\nüí∞ ${state.price} ‚ÇΩ\nüìÅ ${state.category} > ${state.subcategory}`,
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [[{ text: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]],
        one_time_keyboard: true,
      },
    });

  } else if (state.step === '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ') {
    if (text === '‚úÖ –î–æ–±–∞–≤–∏—Ç—å') {
      await accessSheet();
      const sheet = doc.sheetsByIndex[0];
      const photo = await bot.getFile(userPhotos[chatId][0]);
      const photoUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${photo.file_path}`;

      await sheet.addRow({
        '–∫–∞—Ç–µ–≥–æ—Ä–∏—è': state.category,
        '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è': state.subcategory,
        '–Ω–∞–∑–≤–∞–Ω–∏–µ': state.title,
        '–æ–ø–∏—Å–∞–Ω–∏–µ': state.description,
        '—Ü–µ–Ω–∞': state.price,
        '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ': photoUrl,
      });

      bot.sendMessage(chatId, '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É!');
    } else {
      bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    }

    delete userStates[chatId];
    delete userPhotos[chatId];
  }
});